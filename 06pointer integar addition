// Polynomial division provided that the quotient and remainder have integer coefficients
#include <iostream>
using namespace std;

// quotient = dividend / divisor; remainder = dividend % divisor provided that
// dividendExpon[ dividendSize - 1 ] >= divisorExpon[ divisorSize - 1 ], and
// neither dividend nor divisor is the zero polynomial
void division( int *dividendCoef, long long int *dividendExpon, int dividendSize,
               int *divisorCoef, long long int *divisorExpon, int divisorSize,
               int *&quotientCoef, long long int *&quotientExpon, int &quotientSize,
               int *&remainderCoef, long long int *&remainderExpon, int &remainderSize );

// returns true if and only if polynomial1 == polynomial2
bool equal( int *coefficient1, long long int *exponent1, int size1,
            int *coefficient2, long long int *exponent2, int size2 );

// minuend -= subtrahend
void subtraction( int *minuendCoef, long long int *minuendExpon, int &minuendSize,
                  int *subtrahendCoef, long long int *subtrahendExpon, int subtrahendSize );

// outputs the specified polynomial
void output( int *coefficient, long long int *exponent, int size );

const int arraySize = 20;

int main()
{
   int T;
   cin >> T;
   for( int t = 0; t < T; t++ )
   {
      int dividendSize;
      cin >> dividendSize; // input dividend
      int *dividendCoef = new int[ dividendSize ]();
      long long int *dividendExpon = new long long int[ dividendSize ]();
      for( int i = dividendSize - 1; i >= 0; i-- )
         cin >> dividendCoef[ i ];
      for( int i = dividendSize - 1; i >= 0; i-- )
         cin >> dividendExpon[ i ];

      int divisorSize;
      cin >> divisorSize; // input divisor
      int *divisorCoef = new int[ divisorSize ]();
      long long int *divisorExpon = new long long int[ divisorSize ]();
      for( int i = divisorSize - 1; i >= 0; i-- )
         cin >> divisorCoef[ i ];
      for( int i = divisorSize - 1; i >= 0; i-- )
         cin >> divisorExpon[ i ];

      int quotientSize;
      int *quotientCoef;
      long long int *quotientExpon;

      int remainderSize;
      int *remainderCoef;
      long long int *remainderExpon;

      // quotient = dividend / divisor; remainder = dividend % divisor
      division( dividendCoef, dividendExpon, dividendSize,
                divisorCoef, divisorExpon, divisorSize,
                quotientCoef, quotientExpon, quotientSize,
                remainderCoef, remainderExpon, remainderSize );

      output( quotientCoef, quotientExpon, quotientSize );
      output( remainderCoef, remainderExpon, remainderSize );

      delete[] dividendCoef;
      delete[] dividendExpon;
      delete[] divisorCoef;
      delete[] divisorExpon;
      delete[] quotientCoef;
      delete[] quotientExpon;
      delete[] remainderCoef;
      delete[] remainderExpon;
   }
}

// quotient = dividend / divisor; remainder = dividend % divisor provided that
// dividendExpon[ dividendSize - 1 ] >= divisorExpon[ divisorSize - 1 ], and
// neither dividend nor divisor is the zero polynomial
void division( int *dividendCoef, long long int *dividendExpon, int dividendSize,
               int *divisorCoef, long long int *divisorExpon, int divisorSize,
               int *&quotientCoef, long long int *&quotientExpon, int &quotientSize,
               int *&remainderCoef, long long int *&remainderExpon, int &remainderSize )
{
    int *bufferCoef=new int[dividendSize]();
    int bufferSize=0;
    long long int *bufferExpon=new long long int[dividendSize]();
    quotientCoef=new int[dividendSize];
    quotientExpon=new long long int[dividendSize];
    remainderCoef=new int[dividendSize];
    remainderExpon=new long long int[dividendSize];
    remainderSize=dividendSize;
    int z=0;
    for(int i=0;i<dividendSize;i++){
        remainderCoef[i]=dividendCoef[i];
        remainderExpon[i]=dividendExpon[i];
    }
    while(remainderSize>0&&(remainderExpon[remainderSize-1]>divisorExpon[divisorSize-1]||((remainderExpon[remainderSize-1]==divisorExpon[divisorSize-1])&&remainderCoef[remainderSize-1]/divisorCoef[divisorSize-1]!=0))){
    quotientCoef[z]=remainderCoef[remainderSize-1]/divisorCoef[divisorSize-1];
    quotientExpon[z]=remainderExpon[remainderSize-1]-divisorExpon[divisorSize-1];
        bufferSize=0;
        for(int i=0;i<divisorSize;i++){
            bufferCoef[i]=quotientCoef[z]*divisorCoef[i];
            bufferExpon[i]=quotientExpon[z]+divisorExpon[i];
            bufferSize++;
        }
        subtraction(remainderCoef, remainderExpon, remainderSize, bufferCoef, bufferExpon, bufferSize);
        z++;
    }
    quotientSize=z;
    if(remainderSize<=0){
        remainderSize=1;
    }
   for(int i=0;i<z/2;i++){
        if(quotientExpon[i]>quotientExpon[quotientSize-1-i]){
            swap(quotientCoef[i], quotientCoef[quotientSize-1-i]);
            swap(quotientExpon[i],quotientExpon[quotientSize-1-i]);
        }
    }
  
  
    
}

// returns true if and only if polynomial1 == polynomial2
bool equal( int *coefficient1, long long int *exponent1, int size1,
            int *coefficient2, long long int *exponent2, int size2 )
{
   if( size1 != size2 )
      return false;

   for( int i = 0; i < size1; i++ )
      if( coefficient1[ i ] != coefficient2[ i ] || exponent1[ i ] != exponent2[ i ] )
         return false;

   return true;
}

// minuend -= subtrahend
void subtraction( int *minuendCoef, long long int *minuendExpon, int &minuendSize,
                  int *subtrahendCoef, long long int *subtrahendExpon, int subtrahendSize )
{
    for(int j=0;j<subtrahendSize;j++){
        bool found=false;
        for(int i=0;i<minuendSize;i++){
            if(minuendExpon[i]==subtrahendExpon[j]){
                minuendCoef[i]-=subtrahendCoef[j];
                found=true;
            }}
        for(int i=0;i<minuendSize;i++){
        if(minuendCoef[i]==0){
            for(int j=i;j<minuendSize-1;j++){
                swap(minuendCoef[j],minuendCoef[j+1]);
                swap(minuendExpon[j],minuendExpon[j+1]);
            }
            minuendSize--;
        }}
        if(!found){
            minuendCoef[minuendSize]=0-subtrahendCoef[j];
            minuendExpon[minuendSize]=subtrahendExpon[j];
            minuendSize++;
        }
    }
    for(int j=0;j<minuendSize;j++){
    for(int i=0;i<minuendSize;i++){
        if(minuendExpon[i]>minuendExpon[i+1]){
            swap(minuendExpon[i],minuendExpon[i+1]);
            swap(minuendCoef[i],minuendCoef[i+1]);
        }
    }}

  
  
    
}

// outputs the specified polynomial
void output( int *coefficient, long long int *exponent, int size )
{
   cout << size << endl;
   cout << coefficient[ size - 1 ];
   for( int i = size - 2; i >= 0; i-- )
      cout << " " << coefficient[ i ];
   cout << endl;

   cout << exponent[ size - 1 ];
   for( int i = size - 2; i >= 0; i-- )
      cout << " " << exponent[ i ];
   cout << endl;
}
